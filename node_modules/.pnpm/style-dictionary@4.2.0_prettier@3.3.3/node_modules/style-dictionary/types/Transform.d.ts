import type { Filter } from './Filter.js';
import type { TransformedToken } from './DesignToken.js';
import type { PlatformConfig, Config } from './Config.js';
import type { Volume } from './Volume.js';
interface BaseTransform<Type, Value> {
    name: string;
    type: Type;
    filter?: Filter['filter'];
    transitive?: boolean;
    transform: (token: TransformedToken, config: PlatformConfig, options: Config, vol?: Volume) => Promise<Value> | Value;
}
export type NameTransform = BaseTransform<'name', string>;
export type AttributeTransform = BaseTransform<'attribute', Record<string, unknown>>;
export type ValueTransform = BaseTransform<'value', unknown | undefined>;
export type Transform = NameTransform | AttributeTransform | ValueTransform;
export {};
